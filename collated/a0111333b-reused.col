//@author: a0111333b-reused



	/**
	 * origin: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\CustomCaretListener.java
	 */


package planner;

import java.awt.Rectangle;
import java.util.logging.Logger;

import javax.swing.SwingUtilities;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.JTextComponent;

/**
* The CustomCaretListener class controls many pixels to be shown beyond the caret
*
	// End of segment: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\CustomCaretListener.java





	/**
	 * origin: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\CustomCaretListener.java
	 */

*/
public class CustomCaretListener implements CaretListener{

    private int numOfPixelsToShow_;
    
    private final static Logger customCaretListenerLogger_ = Logger.getLogger(CustomCaretListener.class.getName());
    
    private final int MINIMUM_NUMBER_OF_PIXELS_TO_BE_SHOWN = 0;
    
    /**
     * Constructs a listener to handle many pixels to be shown beyond the caret. If negative integers
     * are passed in, it will automatically set itself to show zero pixels beyond the caret.
     *
     * @param numOfPixelsToShow    The number of pixels to be shown beyond the caret.
     */
    public CustomCaretListener( int numOfPixelsToShow ){
        customCaretListenerLogger_.setLevel(java.util.logging.Level.SEVERE);
        setNumOfPixelsToShow(numOfPixelsToShow);
    }
    
    /**
     * Sets the number of pixels to be shown beyond the caret. If negative integers
     * are passed in, it will automatically set itself to show zero pixels beyond the caret.
     *
     * @param numOfPixelsToShow    The number of pixels to be shown beyond the caret.
     */
    public void setNumOfPixelsToShow( int numOfPixelsToShow ){
        numOfPixelsToShow_ = Math.max(numOfPixelsToShow, MINIMUM_NUMBER_OF_PIXELS_TO_BE_SHOWN);
    }
    
    /**
     * Get the number of pixels to be shown beyond the caret.
     *
     * @return  The number of pixels currently set to be shown beyond the caret
     */
    public int getNumOfPixelsShown(){
        return numOfPixelsToShow_;
    }
    
    /**
     * Setup a listener to control the number of pixels to be shown beyond the caret
     *
     * @param caretEvent   The event fired by the caret that is being listened to
     */
    @Override
    public void caretUpdate( final CaretEvent caretEvent ){
        SwingUtilities.invokeLater(new Runnable(){
            @Override
            public void run(){
                try{
                    JTextComponent textComponent = (JTextComponent)caretEvent.getSource();
                    if( textComponent != null ){
                        int caretPosition = textComponent.getCaretPosition();
                        Rectangle visibleRect = textComponent.modelToView(caretPosition);
                        visibleRect.x = visibleRect.x + numOfPixelsToShow_;
                        textComponent.scrollRectToVisible(visibleRect);
                    }
                } catch( BadLocationException badLocationException ){
                    customCaretListenerLogger_.severe(badLocationException.getMessage());
                }
            }
        });
    }
}
	// End of segment: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\CustomCaretListener.java





	/**
	 * origin: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\CustomNoWrapKit.java
	 */


package planner;

import javax.swing.text.StyledEditorKit;
import javax.swing.text.ViewFactory;

/**
* The CustomNoWrapKit class is a style editor kit used by text components to prevent strings with widths exceeding the 
* width of the text component from being wrapped to the next line but enables the view of the text component to move
* along with the updated string
*
	// End of segment: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\CustomNoWrapKit.java





	/**
	 * origin: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\CustomNoWrapKit.java
	 */

*/
public class CustomNoWrapKit extends StyledEditorKit{

    private ViewFactory customViewFactory_;
    
    /**
    * Constructs a style editor kit using a custom view factory that handles the logic of scrolling of the text component's
    * view in response to increasing string length
    */
    public CustomNoWrapKit(){
        super();
        customViewFactory_ = new NoWrapTextLogic();
    }
    
    /**
     * Gets the view factory currently used by this editor kit
     * 
     * @return The view factory currently used by this editor kit to handle the logic of scrolling of the text component's
     *         view in response to increasing string length
     */
    @Override
    public ViewFactory getViewFactory(){
        return customViewFactory_;
    }
}

	// End of segment: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\CustomNoWrapKit.java





	/**
	 * origin: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\CustomWrapKit.java
	 */


package planner;

import javax.swing.text.StyledEditorKit;
import javax.swing.text.ViewFactory;

/**
* The CustomWrapKit class is a style editor kit used by text components to allow for strings with widths exceeding the 
* width of the text component to wrap around to the next line
*
	// End of segment: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\CustomWrapKit.java





	/**
	 * origin: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\CustomWrapKit.java
	 */

*/
public class CustomWrapKit extends StyledEditorKit{

    private ViewFactory defaultViewFactory_;
    
    /**
     * Constructs a style editor kit using a custom view factory that handles wrap text logic
     */
    public CustomWrapKit(){
        super();
        defaultViewFactory_ = new WrapTextLogic();
    }
    
    /**
     * Retrieves the view factory currently used by this editor kit
     * 
     * @return The view factory currently used by this editor kit to handle wrap text logic
     */
    @Override
    public ViewFactory getViewFactory(){
        return defaultViewFactory_;
    }
}

	// End of segment: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\CustomWrapKit.java





	/**
	 * origin: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\InvisibleScrollBarUI.java
	 */


package planner;

import java.awt.Graphics;
import java.awt.Rectangle;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.plaf.basic.BasicScrollBarUI;

/**
* The InvisibleScrollBarUI class is a customised scroll bar that is invisible
*
	// End of segment: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\InvisibleScrollBarUI.java





	/**
	 * origin: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\InvisibleScrollBarUI.java
	 */

*/
public class InvisibleScrollBarUI extends BasicScrollBarUI{

    private InvisibleButton downButton_ = null;
    private InvisibleButton upButton_ = null;
    
    /**
     * Constructs a scroll bar that is invisible
     */
    public InvisibleScrollBarUI(){
        super();
        downButton_ = new InvisibleButton(); 
        prepareButton(downButton_);
        upButton_ = new InvisibleButton();
        prepareButton(upButton_);
    }
    
    /**
     * Set attributes of the buttons of the scroll bar so that it will not be focusable
     * 
     * @param currentButton The button of the scroll bar that is going to be set to be unfocusable
     */
    private void prepareButton( InvisibleButton currentButton ){
        if( currentButton != null ){
            currentButton.setFocusable(false);
        }
    }
    
    /**
     * Returns the button that represent the decrease view 
     * 
     * @param orientation     The orientation of the scrollbar that will be using this button
     */
    @Override
    protected JButton createIncreaseButton( int orientation ){
        return downButton_;
    }
    
    /**
     * Returns the button that represent the increase view 
     * 
     * @param orientation     The orientation of the scrollbar that will be using this button
     */
    @Override
    protected JButton createDecreaseButton( int orientation ){
        return upButton_;
    }
    
    /**
     * Handles the rendering of the scrollbar track
     * 
     * @param graphics     An object that provides access to scrollbar track component rendering
     * @param component    The scrollbar component
     * @param thumbRect    The x coordinates, y coordinates, width and height of the scrollbar thumb
     */
    @Override
    protected void paintTrack( Graphics graphics, JComponent component, Rectangle thumbRect ){
    }
    
    /**
     * Handles the rendering of the scrollbar thumb
     * 
     * @param graphics     An object that provides access to scrollbar thumb component rendering
     * @param component    The scrollbar component
     * @param thumbRect    The x coordinates, y coordinates, width and height of the scrollbar thumb
     */
    @Override
    protected void paintThumb( Graphics graphics, JComponent component, Rectangle thumbRect ){
    }
    
    /**
     * Returns the custom down button component used for the invisible scrollbar.
     * 
     * @return The down button component used for the invisible scrollbar
     */
    public InvisibleButton getDownButtonComponent(){
        return downButton_;
    }
    
    /**
     * Returns the custom up button component used for the invisible scrollbar.
     * 
     * @return The up button component used for the invisible scrollbar.
     */
    public InvisibleButton getUpButtonComponent(){
        return upButton_;
    }
}

	// End of segment: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\InvisibleScrollBarUI.java





	/**
	 * origin: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\NonWrappingParagraphLayout.java
	 */


package planner;

import javax.swing.text.Element;
import javax.swing.text.ParagraphView;

/**
* The NonWrappingParagraphLayout class handles the layout of the editor kit used for non wrapping text
*
	// End of segment: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\NonWrappingParagraphLayout.java





	/**
	 * origin: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\NonWrappingParagraphLayout.java
	 */

*/
public class NonWrappingParagraphLayout extends ParagraphView{

    /**
     * Constructs the layout for the editor kit used for non wrapping text
     */
    public NonWrappingParagraphLayout( Element element ){
        super(element);
    }
    
    /**
     * Sets the width and height of the layout for the editor kit used for non wrapping text
     * 
     * @param width     The width of the layout to be set
     * @param height    The height of the layout to be set
     */
    @Override
    public void layout( int width, int height ){
        super.layout( Integer.MAX_VALUE, height );
    }
    
    /**
     * Returns the minimum span of the layout
     * 
     * @param axis     The orientation of the layout
     * @return         The minimum span of the layout
     */
    @Override
    public float getMinimumSpan( int axis ){
        return super.getPreferredSpan(axis);
    }
}

	// End of segment: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\NonWrappingParagraphLayout.java





	/**
	 * origin: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\NoWrapTextLogic.java
	 */


package planner;

import javax.swing.text.AbstractDocument;
import javax.swing.text.BoxView;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.View;
import javax.swing.text.ViewFactory;

/**
* The NoWrapTextLogic class handles the logic of non wrapping text for the editor kit implementing non wrapping text behavior
*
	// End of segment: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\NoWrapTextLogic.java





	/**
	 * origin: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\NoWrapTextLogic.java
	 */

*/
public class NoWrapTextLogic implements ViewFactory{

    /**
     * Returns the view required for the document containing the text to be displayed
     * 
     * @param element     An object representing the document containing the text to be displayed
     * @return            The view required for the document containing the text to be displayed
     */
    @Override
    public View create( Element element ){
        
        if( element == null ){
            return null;
        }
        
        String property = element.getName();
        if( property != null ){
            if( property.equals( AbstractDocument.ParagraphElementName ) ){
                return new NonWrappingParagraphLayout(element);
            } else if( property.equals( AbstractDocument.SectionElementName ) ){
                return new BoxView(element, View.Y_AXIS );
            }
        }
        return new LabelView(element);
    }
}

	// End of segment: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\NoWrapTextLogic.java





	/**
	 * origin: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\WrappingLabelLayout.java
	 */


package planner;

import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.View;

/**
* The WrappingLabelLayout class handles the layout of the editor kit used for wrapping text
*
	// End of segment: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\WrappingLabelLayout.java





	/**
	 * origin: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\WrappingLabelLayout.java
	 */

*/
public class WrappingLabelLayout extends LabelView{

    private final float DEFAULT_MINIMUM_SPAN = 0.0f;
    
    /**
     * Constructs the layout for the editor kit used for wrapping text
     */
    public WrappingLabelLayout( Element element ){
        super(element);
    }
    
    /**
     * Returns the minimum span of the layout
     * 
     * @param axis     The orientation of the layout
     * @return         The minimum span of the layout
     */
    @Override
    public float getMinimumSpan( int axis ){
        if( axis == View.Y_AXIS ){
            return super.getMinimumSpan(axis);
        } else{
            return DEFAULT_MINIMUM_SPAN;
        }
    }
}

	// End of segment: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\WrappingLabelLayout.java





	/**
	 * origin: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\WrapTextLogic.java
	 */


package planner;

import javax.swing.text.AbstractDocument;
import javax.swing.text.BoxView;
import javax.swing.text.ComponentView;
import javax.swing.text.Element;
import javax.swing.text.IconView;
import javax.swing.text.LabelView;
import javax.swing.text.ParagraphView;
import javax.swing.text.StyleConstants;
import javax.swing.text.View;
import javax.swing.text.ViewFactory;

/**
* The NoWrapTextLogic class handles the logic of wrapping text for the editor kit implementing wrapping text behavior
*
	// End of segment: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\WrapTextLogic.java





	/**
	 * origin: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\WrapTextLogic.java
	 */

*/
public class WrapTextLogic implements ViewFactory{

    /**
     * Returns the view required for the document containing the text to be displayed
     * 
     * @param element     An object representing the document containing the text to be displayed
     * @return            The view required for the document containing the text to be displayed
     */
    @Override
    public View create( Element element ){
        String viewType = element.getName();
        if( viewType != null ){
            if( viewType.equals( AbstractDocument.ParagraphElementName ) ){
                return new ParagraphView(element);
            } else if( viewType.equals( AbstractDocument.ContentElementName ) ){
                return new WrappingLabelLayout(element);
            } else if( viewType.equals( AbstractDocument.SectionElementName ) ){
                return new BoxView( element, View.Y_AXIS );
            } else if( viewType.equals( StyleConstants.IconElementName ) ){
                return new IconView(element);
            } else if( viewType.equals( StyleConstants.ComponentElementName) ){
                return new ComponentView(element);
            }
        }
        return new LabelView(element);
    }
}

	// End of segment: C:\Users\Knowledge\Desktop\Collate V2.0\src\planner\WrapTextLogic.java





